for row, tiles in enumerate(self.map.data):
    for col, tile in enumerate(tiles):
        if tile == '1':
            Wall(self, col, row)
        if tile == 'P':
            self.player = Player(self, col, row)
        if tile == 'M':
            Mob(self, col, row)
        if tile == 'B':
            Build(self, col, row)
        if tile == 'T':
            Tree(self, col, row)


        self.build_img = pg.image.load(path.join(asset_folder, BUILD_IMG)).convert_alpha()
        self.build_img = pg.transform.scale(self.build_img, (TILESIZE, TILESIZE))
        self.tree_img = pg.image.load(path.join(asset_folder, TREE_IMG)).convert_alpha()
        self.tree_img = pg.transform.scale(self.tree_img, (TILESIZE, TILESIZE))


    def draw_grid(self):
        for x in range(0, WIDTH, TILESIZE):
            pg.draw.line(self.screen, BG_COLOR, (x, 0), (x, HEIGHT))
        for y in range(0, HEIGHT, TILESIZE):
            pg.draw.line(self.screen, BG_COLOR, (0, y), (WIDTH, y))

    def sign_collide(self, dx = 0, dy = 0):
        for sign in self.game.signs:
            if sign.x == self.x + dx and sign.y == self.y + dy:
                print('yes')
                return True
        return Falses


    def draw_dialogue(self, surf, text):
        BAR_LENGTH = WIDTH - 20
        BAR_HEIGHT = (HEIGHT / 4) - 20
        self.rect = pg.Rect(10, 394, BAR_LENGTH, BAR_HEIGHT)
        self.outline_rect = pg.Rect(10, 394, BAR_LENGTH, BAR_HEIGHT)
        pg.draw.rect(surf, C5, self.rect)
        pg.draw.rect(surf, C1, self.outline_rect, 2)
        self.draw_text(text, self.font, 17, C1, 20, 404, align='nw')


        self.player_data = {'game': game, 
                            'x': x, 
                            'y': y, 
                            'health': PLAYER_HEALTH, 
                            'damage': PLAYER_DAMAGE, 
                            'armor': PLAYER_ARMOR, 
                            'weapon': 'weapon1', 
                            'keys': 0, 
                            'potions': 0, 
                            'books': 0, 
                            'health_upgrade': 0, 
                            'armor_upgrade': 0,
                            'moves': 0,
                            'max_health': PLAYER_HEALTH,
                            'max_armor': PLAYER_ARMOR}